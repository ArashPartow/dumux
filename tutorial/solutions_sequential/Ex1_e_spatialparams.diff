Index: tutorialspatialparams_decoupled.hh
===================================================================
--- tutorialspatialparams_decoupled.hh	(revision 15068)
+++ tutorialspatialparams_decoupled.hh	(working copy)
@@ -88,10 +88,13 @@
      *  Alternatively, the function intrinsicPermeabilityAtPos(const GlobalPosition& globalPos) could be
      *  defined, where globalPos is the vector including the global coordinates of the finite volume.
      */
-    const FieldMatrix& intrinsicPermeability (const Element& element) const
+    const FieldMatrix& intrinsicPermeabilityAtPos(const GlobalPosition& globalPos) const
     {
-            return K_;
-    }
+       if(globalPos[0]<300)
+           return K1;
+       else
+           return K2;
+    }
 
     //! Define the porosity \f$[-]\f$ of the porous medium depending
     /*! on the position in the domain
@@ -101,9 +104,12 @@
      *  Alternatively, the function porosityAtPos(const GlobalPosition& globalPos) could be
      *  defined, where globalPos is the vector including the global coordinates of the finite volume.
      */
-    double porosity(const Element& element) const
+    double porosityAtPos(const GlobalPosition& globalPos) const
     {
-        return 0.2;
+       if(globalPos[0]<300)
+           return 0.15;
+       else
+           return 0.3;
     }
 
     /*! Return the parameter object for the material law (i.e. Brooks-Corey)
@@ -122,10 +128,12 @@
 
     //! Constructor
     TutorialSpatialParamsSequential(const GridView& gridView)
-    : ParentType(gridView), K_(0)
+    : ParentType(gridView), K1(0), K2(0)
     {
         for (int i = 0; i < dim; i++)
-                K_[i][i] = 1e-7;
+            K1[i][i] = 1e-8;
+        for (int i = 0; i < dim; i++) 
+            K2[i][i] = 1e-9;
 
         // residual saturations
         materialLawParams_.setSwr(0);
@@ -141,7 +149,8 @@
 
 private:
     MaterialLawParams materialLawParams_;
-    FieldMatrix K_;
+    FieldMatrix K1;
+    FieldMatrix K2;
 };
 
 } // end namespace
