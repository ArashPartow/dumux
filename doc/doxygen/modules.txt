/*!
 * \file
 *
 * \brief This file contains all module definitions for the doxygen documentation.
 *
 */

/* ***************** Porousmediumflow ******************/
/*!
 * \defgroup PorousmediumflowModels Porous-Medium Flow Models
 */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup OnePModel 1p (one-phase Darcy flow)
     * \copydetails ./porousmediumflow/1p/model.hh
     */
       /*!
        * \ingroup OnePModel
        * \defgroup SequentialOnePModel Sequential
        * # Pressure
        * \copydetails ./porousmediumflow/1p/sequential/diffusion/cellcentered/pressure.hh
        *
        * # Velocity
        * \copydetails ./porousmediumflow/1p/sequential/diffusion/cellcentered/velocity.hh
        */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup OnePNCModel 1pnc (one-phase, n-component Darcy flow)
     *
     * \copydetails ./porousmediumflow/1pnc/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup OnePNCMinModel 1pncmin (one-phase, n-component Darcy flow with mineralization)
     *
     * \copydetails ./porousmediumflow/1pncmin/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup TwoPModel 2p (two-phase Darcy flow)
     * \copydetails ./porousmediumflow/2p/model.hh
     */
        /*!
         * \ingroup TwoPModel
         * \defgroup SequentialTwoPModel Sequential
         * # Pressure
         * \copydetails ./porousmediumflow/2p/sequential/diffusion/cellcentered/pressure.hh
         *
         * # Velocity
         * \copydetails ./porousmediumflow/2p/sequential/diffusion/cellcentered/velocity.hh
         */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup TwoPOneCModel 2p1c (two-phase, one-component Darcy flow)
     *
     * \copydetails ./porousmediumflow/2p1c/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup TwoPTwoCModel 2p2c (two-phase, two-component Darcy flow)
     * \copydetails ./porousmediumflow/2p2c/model.hh
     */
        /*!
         * \ingroup TwoPTwoCModel
         * \defgroup SequentialTwoPTwoCModel Sequential
         * # Pressure
         * \copydetails ./porousmediumflow/2p2c/sequential/fvpressure.hh
         *
         * # Velocity
         * \copydetails ./porousmediumflow/2p2c/sequential/fvtransport.hh
         */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup TwoPNCModel 2pnc (two-phase, n-component Darcy flow)
     *
     * \copydetails ./porousmediumflow/2pnc/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup TwoPNCMinModel 2pncmin (two-phase, n-component Darcy flow with mineralization)
     *
     * \copydetails ./porousmediumflow/2pncmin/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup ThreePModel 3p (three-phase Darcy flow)
     *
     * \copydetails ./porousmediumflow/3p/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup ThreePThreeCModel 3p3c (three-phase, three-component Darcy flow)
     *
     * \copydetails ./porousmediumflow/3p3c/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup ThreePWaterOilModel 3pwateroil (three-phase, two-component Darcy flow)
     *
     * \copydetails ./porousmediumflow/3pwateroil/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup CO2Model CO2 (two-phase, two-component Darcy flow)
     *
     * \copydetails ./porousmediumflow/co2/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup MineralizationModel Mineralization (equation adding solid/mineralization-phases to a standard Darcy flow model)
     *
     * \copydetails ./porousmediumflow/mineralization/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup MPNCModel MpNc (m-phase, n-component Darcy flow)
     *
     * \copydetails ./porousmediumflow/mpnc/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup NIModel Non-isothermal (energy equation, to be added to an isothermal model)
     *
     * \copydetails ./porousmediumflow/non-isothermal/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup RichardsModel Richards (Richards flow)
     *
     * \copydetails ./porousmediumflow/richards/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup RichardsNCModel RichardsNC (n-component Richards flow)
     *
     * \copydetails ./porousmediumflow/richardsnc/model.hh
     */
    /*!
     * \ingroup PorousmediumflowModels
     * \defgroup TracerModel Tracer (adds tracer transport to a model)
     *
     * \copydetails ./porousmediumflow/tracer/model.hh
     */

/* ***************** FreeflowModels ******************/
/*!
 * \defgroup FreeflowModels Free Flow Models
 */
    /*!
     * \ingroup FreeflowModels
     * \defgroup NavierStokesModel NavierStokes (one-phase Navier-Stokes flow)
     *
     * \copydetails ./freeflow/navierstokes/model.hh
     */
    /*!
     * \ingroup FreeflowModels
     * \defgroup NavierStokesNCModel NavierStokesnc (one-phase, n-component Navier-Stokes flow)
     *
     * \copydetails ./freeflow/navierstokesnc/model.hh
     */
    /*!
     * \ingroup FreeflowModels
     * \defgroup NavierStokesNIModel Non-isothermal (energy equation, to be added to a isothermal NavierStokes model)
     *
     * \copydetails ./freeflow/non-isothermal/model.hh
     */

/* ***************** Benchmarks and Tests ******************/
/*!
 * \defgroup BenchmarksAndTests Benchmarks and Tests
 *  TODO: Doc me in modules.txt!
 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup OnePTests 1p (one phase) benchmarks and tests
 	 * OnePTests contain various tests using a OnePModel. The files are listed below, with hopefully self-explanatory names.
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup OnePNCTests 1pnc (one phase, n-component) benchmarks and tests
 	 * OnePNCTests contain various tests using a OneNCPModel. The files are listed below, with hopefully self-explanatory names.
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup OnePNCMinTests 1pncmin (one phase, n-component mineralization) benchmarks and tests
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup TwoPTests 2p (two phase) benchmarks and tests
 	 * TwoPTests contain various tests using a TwoPModel. The files are listed below, with hopefully self-explanatory names.
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup TwoPOneCTests 2p1c (two phase, one component) benchmarks and tests
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup TwoPTwoCTests 2p2c (two phase, two component) benchmarks and tests
 	 * TwoPTwoCTests contain various tests using a TwoPTwoCModel. The files are listed below, with hopefully self-explanatory names.
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup TwoPNCTests 2pnc (two phase, n-component) benchmarks and tests
 	 * TwoPNCTests contain a fuel cell test problem using the TwoPNCModel. The files are listed below.
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup TwoPNCMinTests 2pncmin (two phase, n-component mineralization) benchmarks and tests
 	 * TwoPNCMinTests contain a salt dissolution test problem using the TwoPNCMinModel. The files are listed below.
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup ThreePTests 3p (three phase) benchmarks and tests
 	 * ThreePTests contain various tests using a ThreePModel. The files are listed below, with hopefully self-explanatory names.
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup ThreePThreeCTests 3p3c (three phase, three component) benchmarks and tests
 	 * ThreePThreeCTests contain various tests using a ThreePThreeCModel. The files are listed below, with hopefully self-explanatory names.
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup ThreePWaterOilTests 3pwateroil (three phase, water oil) benchmarks and tests
 	 * ThreePWaterOilTests contain a SAGD test problem using the ThreePWaterOilModel. The files are listed below.
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup CO2Tests CO2 (two phase, two component) benchmarks and tests
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup MPNCTests MPNC (m phase, n-component) benchmarks and tests
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup MPNCTests MPNC (m phase, n-component) benchmarks and tests
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup RichardsTests Richards benchmarks and tests
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup RichardsNCTests Richards n-component benchmarks and tests
 	 */
 	/*! \ingroup BenchmarksAndTests
 	 * \defgroup TracerTests Tracer benchmarks and tests
 	 */

/* ***************** Discretization ******************/
/*!
 * \defgroup Discretization Discretization schemes
 */
    /*!
     * \ingroup Discretization
     * \defgroup BoxDiscretization Box finite volume scheme
     *
     * \copydetails ./discretization/box/properties.hh
     */
    /*!
     * \ingroup Discretization
     * \defgroup CCDiscretization Cell-centered finite volume scheme
     * # Tpfa
     * \copybrief ./discretization/cellcentered/tpfa/properties.hh
     * # Mpfa
     * \copybrief ./discretization/cellcentered/mpfa/properties.hh
     */
         /*!
         * \ingroup CCDiscretization
         * \defgroup CCTpfaDiscretization Cell-centered finite volume scheme with two-point flux-approximuation (Tpfa)
         *
         * \copydetails ./discretization/cellcentered/tpfa/properties.hh
         */
         /*!
         * \ingroup CCDiscretization
         * \defgroup CCMpfaDiscretization Cell-centered finite volume scheme with multi-point flux-approximuation (Mpfa)
         *
         * \copydetails ./discretization/cellcentered/mpfa/properties.hh
         */
    /*!
     * \ingroup Discretization
     * \defgroup StaggeredDiscretization Staggered finite volume scheme
     * \copydetails ./discretization/staggered/properties.hh
     */

/* ***************** Material ******************/
/*!
 * \defgroup Material Material and Fluid Framework
 * Short description of the most important concepts of the material and fluid framework:
 *
 *  - __Binary coefficient:__ <br>  @copydoc Binarycoefficients
 *  - __Chemistry:__ <br> @copydoc Chemistry
 *  - __Component:__ <br> @copydoc Components
 *  - __Constraint solver:__ <br> @copydoc ConstraintSolver
 *  - __Equation of state:__ <br> @copydoc EOS
 *  - __Fluid-Matrix Interactions:__ <br> @copydoc fluidmatrixinteractions
 *  - __Fluid state:__ <br> @copydoc FluidStates
 *  - __Fluid system:__ <br> @copydoc Fluidsystems
 *  - __Spatial Parameters:__ <br> @copydoc SpatialParameters
 */
    /*!
     * \ingroup Material
     * \defgroup Binarycoefficients Binary Coefficients
     *  Binary coefficients describe the relations
     *  of a mixture of two components. Typical binary coefficients are
     *  Henry coefficients or binary molecular diffusion
     *  coefficients. So far, the programming interface for accessing binary
     *  coefficients has not been standardized in Dumux.
     */
    /*!
     * \ingroup Material
     * \defgroup Chemistry Chemistry
     * Chemical reactions can be relevant for all thermodynamic relations
     * for the liquid and gas phase of multiple chemical species
     * The main purpose is to provide a convenient way to access these
     * relationships via source or sink terms.
     */
    /*!
     * \ingroup Material
     * \defgroup Components Components
     * Components are fluid systems which provide the
     *  thermodynamic relations for the liquid and gas phase of a single
     *  chemical species or a fixed mixture of species. Their main purpose
     *  is to provide a convenient way to access these quantities from
     *  full-fledged fluid systems. Components are not supposed to be used
     *  by models directly.
     */
         /*!
         * \ingroup Components
         * \defgroup IAPWS IAPWS
         */
     /*!
     * \ingroup Material
     * \defgroup ConstraintSolver Constraint Solver
     * Constraint solvers are auxiliary tools to
     * make sure that a fluid state is consistent with some thermodynamic
     * constraints. All constraint solvers specify a well defined set of
     * input variables and make sure that the resulting fluid state is
     * consistent with a given set of thermodynamic equations.
     * Constraint solvers connect the thermodynamic relations expressed by
     * fluid systems with the thermodynamic quantities stored by fluid
     * states. Using them is not mandatory for models, but given the fact
     * that some thermodynamic constraints can be quite complex to solve,
     * sharing this code between models makes sense.
     */
    /*!
     * \ingroup Material
     * \defgroup EOS Equation of State
     * Equations of state (EOS) are auxiliary
     * classes which provide relations between a fluid phase's temperature,
     * pressure, composition and density. Since these classes are only used
     * internally in fluid systems, their programming interface is
     * currently ad-hoc.
     */
    /*!
     * \ingroup Material
     *  \defgroup fluidmatrixinteractions Fluid-Matrix Interactions
     * Some parameters are functions of the fluid state as well as parameters of
     * the matrix. For example the capillary pressure is a function of the phase saturation
     * and the shape parameter \f$\lambda\f$ which is dependent on the material. All such relations
     * are gathered in this module.
     */
        /*!
         * \ingroup fluidmatrixinteractions
         *  \defgroup fluidmatrixinteractionslaws Laws for Fluid-Matrix Interactions
         */
         /*!
         * \ingroup fluidmatrixinteractions
         *  \defgroup fluidmatrixinteractionsparams Parameters for Fluid-Matrix Interactions
         */
    /*!
     * \ingroup Material
     * \defgroup FluidStates Fluid States
     * Fluid states are responsible for representing the
     * complete thermodynamic configuration of a system at a given spatial
     * and temporal position. A fluid state always provides access methods
     * to __all__ thermodynamic quantities, but the concept of a fluid state does not
     * mandate what assumptions are made to store these thermodynamic
     * quantities. What fluid states also do __not__ do is to make sure
     * that the thermodynamic state which they represent is physically
     * possible.
     */
    /*!
     * \ingroup Material
     * \defgroup Fluidsystems Fluid Systems
     * Fluid systems express the thermodynamic relations
    *  Strictly speaking, these relations are
    *  functions, mathematically.} between quantities. Since functions do
    *  not exhibit any internal state, fluid systems are stateless classes,
    *  i.e. all member functions are static. This is a conscious
    *  decision since the thermodynamic state of the system is expressed by
    *  a fluid state!
     */
    /*!
     * \ingroup Material
     * \defgroup SpatialParameters Spatial Parameters
     * All parameters which depend on the matrix and
     * therefore on the position within the model domain are defined as spatial
     * parameters. For example permeability, porosity etc.
     *
     */

/* ***************** Adaptive ******************/
/*!
 * \defgroup Adaptive Adaptive
 *  TODO: Doc me in modules.txt!
 */

/* ***************** Assembly ******************/
/*!
 * \defgroup Assembly Assembly
 *  TODO: Doc me in modules.txt!
 */

/* ***************** Common ******************/
/*!
 * \defgroup Common Common
 *  TODO: Doc me in modules.txt!
 */
 	/*!
  	 * \ingroup Common
  	 * \defgroup Properties Properties
  	 * TODO: Doc me in modules.txt!
  	 */

/* ***************** InputOutput ******************/
/*!
 * \defgroup InputOutput Input Output
 *  TODO: Doc me in modules.txt!
 */

/* ***************** Linear ******************/
/*!
 * \defgroup Linear Linear
 *  TODO: Doc me in modules.txt!
 */

/* ***************** Nonlinear ******************/
/*!
 * \defgroup Nonlinear Nonlinear
 *  TODO: Doc me in modules.txt!
 */

/* ***************** Parallel ******************/
/*!
 * \defgroup Parallel Parallel
 *  TODO: Doc me in modules.txt!
 */
