/*!
 * \file
 *
 * \brief This file contains all module definitions for the doxygen documentation.
 */

/* ***************** Common ******************/
/*!
 * \defgroup Common Common Infrastucture
 */
    /*!
     * \ingroup Common
     * \defgroup BC Boundary Conditions
     */
    /*!
     * \ingroup Common
     * \defgroup Math Elementary Math Functions
     */
    /*!
     * \ingroup Common
     * \defgroup Exception Exceptions
     */
    /*!
     * \ingroup Common
     * \defgroup Linear Linear Solver Backends
     */
    /*!
     * \ingroup Common
     * \defgroup Newton Newton Solver
     */
    /*!
     * \ingroup Common
     * \defgroup Parameter Parameters
     * See the file parameterlist for available parameters.
     */
    /*!
     * \ingroup Common
     * \defgroup Properties Property System
     */
    /*!
     * \ingroup Common
     * \defgroup Spline Splines
     */
    /*!
     * \ingroup Common
     * \defgroup Start Starting the Simulation
     */
    /*!
     * \ingroup Common
     * \defgroup SimControl Time Manager
     */
    /*!
     * \ingroup Common
     * \defgroup Valgrind Valgrind
     */

/* ***************** Material ******************/
/*!
 * \defgroup Material Material and Fluid Framework
 * Short description of the most important concepts of the material and fluid framework:
 *
 *  - __Binary coefficient:__  @copydoc Binarycoefficients
 * 
 * 
 *  - __Component:__ @copydoc Components
 * 
 * 
 *  - __Constraint solver:__ @copydoc ConstraintSolver
 * 
 * 
 *  - __Equation of state:__ @copydoc EOS
 * 
 * 
 *  - __Fluid state:__ @copydoc FluidStates
 * 
 * 
 *  - __Fluid system:__ @copydoc Fluidsystems
 * 
 *   
 *  - __Fluid-Matrix Interactions:__ @copydoc fluidmatrixinteractions
 * 
 * 
 *  - __Parameter cache:__ @copydoc ParameterCache
 * 
 * 
 *  - __Spatial Parameters:__ @copydoc SpatialParameters
 */
    /*!
     * \ingroup Material
     * \defgroup Binarycoefficients Binary Coefficients
     *  Binary coefficients describe the relations
     *  of a mixture of two components. Typical binary coefficients are
     *  Henry coefficients or binary molecular diffusion
     *  coefficients. So far, the programming interface for accessing binary
     *  coefficients has not been standardized in Dumux.
     */
    /*!
     * \ingroup Material
     * \defgroup Components Components
     * Components are fluid systems which provide the
     *  thermodynamic relations for the liquid and gas phase of a single
     *  chemical species or a fixed mixture of species. Their main purpose
     *  is to provide a convenient way to access these quantities from
     *  full-fledged fluid systems. Components are not supposed to be used
     *  by models directly.
     * 
     */
        /*!
         * \ingroup Components
         * \defgroup IAPWS IAPWS
         */
    /*!
     * \ingroup Material
     * \defgroup ConstraintSolver Constraint Solver
     * Constraint solvers are auxiliary tools to
     * make sure that a fluid state is consistent with some thermodynamic
     * constraints. All constraint solvers specify a well defined set of
     * input variables and make sure that the resulting fluid state is
     * consistent with a given set of thermodynamic equations.
     * Constraint solvers connect the thermodynamic relations expressed by
     * fluid systems with the thermodynamic quantities stored by fluid
     * states. Using them is not mandatory for models, but given the fact
     * that some thermodynamic constraints can be quite complex to solve,
     * sharing this code between models makes sense.
     */   
    /*!
     * \ingroup Material
     * \defgroup EOS Equation of State
     * 
     * Equations of state (EOS) are auxiliary
     * classes which provide relations between a fluid phase's temperature,
     * pressure, composition and density. Since these classes are only used
     * internally in fluid systems, their programming interface is
     * currently ad-hoc.
     */
    /*!
     * \ingroup Material
     * \defgroup FluidStates Fluid States
     * Fluid states are responsible for representing the
     * complete thermodynamic configuration of a system at a given spatial
     * and temporal position. A fluid state always provides access methods
     * to __all__ thermodynamic quantities, but the concept of a fluid state does not
     * mandate what assumptions are made to store these thermodynamic
     * quantities. What fluid states also do __not__ do is to make sure
     * that the thermodynamic state which they represent is physically
     * possible.
     */
    /*!
     * \ingroup Material
     * \defgroup Fluidsystems Fluid Systems
     * Fluid systems express the thermodynamic relations 
    *  Strictly speaking, these relations are
    *  functions, mathematically.} between quantities. Since functions do
    *  not exhibit any internal state, fluid systems are stateless classes,
    *  i.e. all member functions are static. This is a conscious
    *  decision since the thermodynamic state of the system is expressed by
    *  a fluid state!
     */
    /*!
     * \ingroup Material
     *  \defgroup fluidmatrixinteractions Fluid-Matrix Interactions
     * Some parameters are functions of the fluid state as well as parameters of
     * the matrix. For example the capillary pressure is a function of the phase saturation
     * and the shape parameter \f$\lambda\f$ which is dependent on the material. All such relations
     * are gathered in this module.
     */
        /*!
         * \ingroup fluidmatrixinteractions
         *  \defgroup fluidmatrixinteractionslaws Laws for Fluid-Matrix Interactions
         */
         /*!
         * \ingroup fluidmatrixinteractions
         *  \defgroup fluidmatrixinteractionsparams Parameters for Fluid-Matrix Interactions
         */  
    /*!
     * \ingroup Material
     * \defgroup ParameterCache Parameter Cache
     * Fluid systems sometimes require
     * computationally expensive parameters for multiple relations. Such
     * parameters can be cached using a so-called parameter
     * cache. Parameter cache objects are specific for each fluid system
     * but they must provide a common interface to update the internal
     * parameters depending on the quantities which changed since the last
     * update.
     * All fluid systems must export a type for their __ParameterCache__
     * objects. Parameter caches can be used to cache parameter that are
     * expensive to compute and are required in multiple thermodynamic
     * relations. For fluid systems which do need to cache parameters,
     * Dumux provides a __NullParameterCache__ class.
     * The actual quantities stored by parameter cache objects are specific
     * to the fluid system and no assumptions on what they provide should be
     * made outside of their fluid system. Parameter cache objects provide a
     * well-defined set of methods to make them coherent with a given fluid
     * state, though.
     */ 
    /*!
     * \ingroup Material
     * \defgroup SpatialParameters Spatial Parameters
     * All parameters which depend on the matrix and
     * therefore on the position within the model domain are defined as spatial
     * parameters. For example permeability, porosity etc.
     */

/* ***************** Fully Implicit ******************/
/*!
 * \defgroup ImplicitModel Fully Implicit Scheme
 */
    /*!
     * \ingroup ImplicitModel
     * \defgroup ImplicitModels Models
     */
        /*!
         * \ingroup ImplicitModels
         * \defgroup OnePModel One-phase
         *
         * \copydetails Dumux::OnePModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup OnePTwoCModel One-phase Two-component
         *
         * \copydetails Dumux::OnePTwoCModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup RichardsModel Richards
         *
         * \copydetails Dumux::RichardsModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup TwoPModel Two-phase
         *
         * \copydetails Dumux::TwoPModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup TwoPNIModel Non-isothermal two-phase
         *
         * \copydetails Dumux::TwoPNIModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup TwoPTwoCModel Two-phase, two-component
         *
         * \copydetails Dumux::TwoPTwoCModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup TwoPTwoCNIModel Non-isothermal two-phase, two-component
         *
         * \copydetails Dumux::TwoPTwoCNIModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup CO2Model CO2
         *
         * \copydetails Dumux::CO2Model
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup CO2NIModel Non-isothermal CO2
         *
         * \copydetails Dumux::CO2NIModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup TwoPDFMModel Two-phase flow in discrete fracture-matrix
         *
         * \copydetails Dumux::TwoPDFMModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup ThreePModel Three-phase
         *
         * \copydetails Dumux::ThreePModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup ThreePThreeCModel Three-phase, three-component
         *
         * \copydetails Dumux::ThreePThreeCModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup ThreePThreeCNIModel Non-isothermal three-phase, three-component
         *
         * \copydetails Dumux::ThreePThreeCNIModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup MPNCModel M-phase N-component
         *
         * \copydetails Dumux::MPNCModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup NIModel Non-Isothermal
         *
         * \copydetails Dumux::NIModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup BoxStokesModel Stokes
         *
         * \copydetails Dumux::StokesModel
         */
         /*!
         * \ingroup ImplicitModels
         * \defgroup BoxStokesncModel N-component Stokes
         *
         * \copydetails Dumux::StokesncModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup BoxStokesncniModel Non-isothermal N-component Stokes
         *
         * \copydetails Dumux::StokesncniModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup BoxZeroEqModel ZeroEq
         *
         * \copydetails Dumux::ZeroEqModel
         */
         /*!
         * \ingroup ImplicitModels
         * \defgroup BoxZeroEqncModel N-component ZeroEq
         *
         * \copydetails Dumux::ZeroEqncModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup BoxZeroEqncniModel Non-isothermal N-component ZeroEq
         *
         * \copydetails Dumux::ZeroEqncniModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup BoxZeroEqModel ZeroEq
         *
         * \copydetails Dumux::ZeroEqModel
         */
         /*!
         * \ingroup ImplicitModels
         * \defgroup BoxZeroEqncModel N-component ZeroEq
         *
         * \copydetails Dumux::ZeroEqncModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup BoxZeroEqncniModel Non-isothermal N-component ZeroEq
         *
         * \copydetails Dumux::ZeroEqncniModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup ElasticBoxModel Linear elastic
         *
         * \copydetails Dumux::ElasticModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup ElOnePTwoCBoxModel One-phase two component linear elastic
         *
         * \copydetails Dumux::ElOnePTwoCModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup ElTwoPBoxModel Two-phase immiscible linear elastic
         *
         * \copydetails Dumux::ElTwoPModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup MultidomainModel Multidomain
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup TwoPTwoCStokesTwoCModel Two-component, Stokes-Darcy
         *
         * \copydetails Dumux::TwoCStokesTwoPTwoCLocalOperator
         * <br><br><br>
         * \copydetails Dumux::TwoPTwoCModel
         * <br>
         * \copydetails Dumux::StokesncModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup TwoPTwoCNIStokesTwoCNIModel Non-isothermal, two-component, Stokes-Darcy
         *
         * \copydetails Dumux::TwoCNIStokesTwoPTwoCNILocalOperator
         * <br><br><br>
         * \copydetails Dumux::TwoPTwoCNIModel
         * <br>
         * \copydetails Dumux::StokesncniModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup TwoPTwoCZeroEqTwoCModel Two-component, ZeroEq turbulence-Darcy
         *
         * \copydetails Dumux::TwoCStokesTwoPTwoCLocalOperator
         * <br><br><br>
         * \copydetails Dumux::TwoPTwoCModel
         * <br>
         * \copydetails Dumux::ZeroEqncModel
         */
        /*!
         * \ingroup ImplicitModels
         * \defgroup TwoPTwoCNIZeroEqTwoCNIModel Non-isothermal, two-component, ZeroEq turbulence-Darcy
         *
         * \copydetails Dumux::TwoCNIStokesTwoPTwoCNILocalOperator
         * <br><br><br>
         * \copydetails Dumux::TwoPTwoCNIModel
         * <br>
         * \copydetails Dumux::ZeroEqncniModel
         */
    /*!
     * \ingroup ImplicitModel
     * \defgroup ImplicitBaseProblems Base Problems
     */
    /*!
     * \ingroup ImplicitModel
     * \defgroup Discretizations Discretizations
     */
         /*!
         * \ingroup Discretizations
         * \defgroup CCModel Fully implicit cell-centered discretization
         */
         /*!
         * \ingroup Discretizations
         * \defgroup BoxModel Fully implicit box discretization
         */
    /*!
     * \ingroup ImplicitModel
     * \defgroup ImplicitBoundaryTypes Boundary Types
     */
    /*!
     * \ingroup ImplicitModel
     * \defgroup ImplicitFluxVariables Flux Variables
     */
    /*!
     * \ingroup ImplicitModel
     * \defgroup ImplicitIndices Indices
     */
    /*!
     * \ingroup ImplicitModel
     * \defgroup ImplicitLocalJacobian Local Jacobian
     */
    /*!
     * \ingroup ImplicitModel
     * \defgroup ImplicitLocalResidual Local Residual
     */
    /*!
     * \ingroup ImplicitModel
     * \defgroup ImplicitProperties Properties
     */
    /*!
     * \ingroup ImplicitModel
     * \defgroup ImplicitTestProblems Test Problems
     */
    /*!
     * \ingroup ImplicitModel
     * \defgroup ImplicitVolumeVariables Volume Variables
     */

/* ***************** Sequential ******************/
/*!
 * \defgroup Sequential Sequential Scheme: IMPET (Implicit Pressure Explicit Transport)
 */

    /*!
     * \ingroup Sequential
     * \defgroup IMPET Models
     */

       /*!
        * \ingroup IMPET
        * \defgroup mpfa MPFA framework
        */

        /*!
         * \ingroup IMPET
         * \defgroup OnePhase Single Phase (FV)
         */
            /*!
             * \ingroup OnePhase
             * \defgroup Pressure1p Pressure Equation
             */
                /*!
                 * \ingroup Pressure1p
                 * \defgroup FV1p Finite Volume
                 */
        /*!
         * \ingroup IMPET
         * \defgroup IMPES Immiscible IMPES
         */
            /*!
             * \ingroup IMPES
             * \defgroup Pressure2p Immiscible Pressure Equation
             */
                /*!
                 * \ingroup Pressure2p
                 * \defgroup FVPressure2p Finite Volume
                 */
                /*!
                * \ingroup Pressure2p
                * \defgroup MimeticPressure2p Mimetic Finite Differences
                */
            /*!
             * \ingroup IMPES
             * \defgroup Saturation2p Immiscible Saturation Transport
             */
                /*!
                 * \ingroup Saturation2p
                 * \defgroup FVSaturation2p Finite Volume
                 */
        /*!
         * \ingroup IMPET
         * \defgroup IMPEC Miscible (Compositional) IMPEC
         */
            /*!
             * \ingroup IMPEC
             * \defgroup multiphase Multiphase Compositional Models
             */
                /*!
                * \ingroup multiphase
                * \defgroup Adaptive2p2c (Grid-)Adaptive Multiphase Compositional Models
                */
            /*!
             * \ingroup IMPEC
             * \defgroup multiphysics Multiphysics Compositional Models
             */
    /*!
     * \ingroup Sequential
     * \defgroup IMPETproblems Base Problems
     */
    /*!
     * \ingroup Sequential
     * \defgroup IMPETProperties Properties
     */
    /*!
     * \ingroup Sequential
     * \defgroup IMPETtests Test Problems
     */

